AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: RAG API + Slack (production)

Parameters:
  ArtifactsBucket:               { Type: String }
  ModelName:                     { Type: String, Default: sentence-transformers/all-MiniLM-L6-v2 }
  IndexPrefix:                   { Type: String, Default: rag/index }
  FaissKey:                      { Type: String, Default: rag/index/faiss.index }
  MetaKey:                       { Type: String, Default: rag/index/meta.json }
  SlackSigningSecretArn:         { Type: String }
  SlackBotTokenArn:              { Type: String }
  RagApiUrl:                     { Type: String }

Globals:
  Function:
    Runtime: python3.11
    Architectures: [arm64]  # Use ARM architecture for better performance/cost
    Timeout: 30
    MemorySize: 2048
    Environment:
      Variables:
        APP_ENV: prod
        ARTIFACTS_BUCKET: !Ref ArtifactsBucket
        MODEL_NAME: !Ref ModelName
        INDEX_PREFIX: !Ref IndexPrefix
        FAISS_KEY: !Ref FaissKey
        META_KEY: !Ref MetaKey
        EMBEDDER_PROVIDER: bedrock
        BEDROCK_REGION: !Ref AWS::Region
        SLACK_SIGNING_SECRET_ARN: !Ref SlackSigningSecretArn
        SLACK_BOT_TOKEN_ARN: !Ref SlackBotTokenArn

Resources:
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: Prod
      CorsConfiguration:
        AllowMethods: ["GET", "POST", "OPTIONS"]
        AllowHeaders: ["*"]
        AllowOrigins: ["*"]

  RAGApi:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../src            # <- your repo's src/
      Handler: rag.api.app.handler
      MemorySize: 2048
      Timeout: 30
      Layers:
        - arn:aws:lambda:us-east-1:471112701253:layer:numpy-1264-arm64:9  # <- replace with your layer ARN
      Policies:
        - S3ReadPolicy: { BucketName: !Ref ArtifactsBucket }
        - AWSSecretsManagerGetSecretValuePolicy: { SecretArn: !Ref SlackSigningSecretArn }
        - AWSSecretsManagerGetSecretValuePolicy: { SecretArn: !Ref SlackBotTokenArn }
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
                      # âœ… Bedrock invoke permissions
        - Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
                - bedrock:InvokeModelWithResponseStream
              Resource:
                # lock to Titan embed model in us-east-1
                - arn:aws:bedrock:us-east-1::foundation-model/amazon.titan-embed-text-v2*
      Events:
        AnyRoute:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /{proxy+}
            Method: ANY

  SlackEventsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../src       # <- your repo's handlers/
      Handler: handlers.slack_events.handler
      MemorySize: 256
      Timeout: 10
      Layers: []
      Environment:
        Variables:
          RagApiUrl: !Ref RagApiUrl
          SLACK_SIGNING_SECRET_ARN: !Ref SlackSigningSecretArn
          SLACK_BOT_TOKEN_ARN: !Ref SlackBotTokenArn
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy: { SecretArn: !Ref SlackSigningSecretArn }
        - AWSSecretsManagerGetSecretValuePolicy: { SecretArn: !Ref SlackBotTokenArn }
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
                - bedrock:InvokeModelWithResponseStream
              Resource:
                # lock to Titan embed model in us-east-1
                - arn:aws:bedrock:us-east-1::foundation-model/amazon.titan-embed-text-v2*
      Events:
        SlackEventsRoute:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /slack/events
            Method: POST

Outputs:
  ApiBaseUrl:
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${HttpApi.Stage}"
  SlackEventsUrl:
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/{HttpApi.Stage}/slack/events"
  ChatApiUrl:
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/{HttpApi.Stage}/chat"
  RAGApiFunction:
    Value: !Ref RAGApi
  SlackEventsFunction:
    Value: !Ref SlackEventsFunction