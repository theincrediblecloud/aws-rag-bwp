AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: RAG API + Slack (production)

Parameters:
  ArtifactsBucket:
    Type: String
  ModelName:
    Type: String
    Default: sentence-transformers/all-MiniLM-L6-v2
  IndexPrefix:
    Type: String
    Default: rag/index
  MetaKey:
    Type: String
    Default: rag/index/meta.jsonl
  SlackSigningSecretArn:
    Type: String
  SlackBotTokenArn:
    Type: String
  RagApiUrl:
    Type: String
  LlmModelId:
    Type: String
    Default: arn:aws:bedrock:us-east-1:471112701253:inference-profile/us.anthropic.claude-haiku-4-5-20251001-v1:0
  LlmInferenceProfileArn:
    Type: String
    Default: arn:aws:bedrock:us-east-1:471112701253:inference-profile/us.anthropic.claude-haiku-4-5-20251001-v1:0
  UseS3Index:
    Type: String
    AllowedValues: ["true","false"]
    Default: "true"
  AnswerFallback:
    Type: String
    AllowedValues: ["allow","deny"]
    Default: "allow"
  Environment:
    Type: String
    Default: prod
    AllowedValues: [dev, staging, prod]
  ProvisionedConcurrency:
    Type: Number
    Default: 2
    Description: Number of provisioned concurrent executions

Conditions:
  IsProd: !Equals [!Ref Environment, prod]

Globals:
  Function:
    Runtime: python3.11
    Architectures: [arm64]
    Timeout: 45
    MemorySize: 2048
    Tracing: Active 
    Environment:
      Variables:
        APP_ENV: !Ref Environment
        ARTIFACTS_BUCKET: !Ref ArtifactsBucket
        MODEL_NAME: !Ref ModelName
        INDEX_PREFIX: !Ref IndexPrefix
        META_KEY: !Ref MetaKey
        INDEX_PATH: s3://#{ArtifactsBucket}/#{IndexPrefix}/vectors.npy
        META_PATH:  s3://#{ArtifactsBucket}/#{MetaKey}
        EMBED_PROVIDER: bedrock
        BEDROCK_REGION: us-east-1
        BEDROCK_MODEL: amazon.titan-embed-text-v2:0
        SLACK_SIGNING_SECRET_ARN: !Ref SlackSigningSecretArn
        SLACK_BOT_TOKEN_ARN: !Ref SlackBotTokenArn
        LLM_PROVIDER: bedrock
        LLM_MODEL_ID: !Ref LlmModelId
        LLM_INFERENCE_PROFILE_ARN: !Ref LlmInferenceProfileArn
        CHUNK_SIZE: "500"
        CHUNK_OVERLAP: "50"
        SNIPPET_CHARS: "800"
        CONTEXT_K: "8"
        RETRIEVE_K: "24"
        TOP_K: "24"
        MAX_TOKENS: "500"
        TEMPERATURE: "0.2"
        "EMBED_DIM": 1024
        USE_S3_INDEX: !Ref UseS3Index
        ANSWER_FALLBACK: !Ref AnswerFallback
        FALLBACK_MIN_SCORE: "0.32"
        FALLBACK_MESSAGE: "I couldn’t find an in-corpus basis. Here’s a brief general answer (no citations)."
        STRICT_MESSAGE: "I’m sorry, I can’t provide an answer based on the available documents."
        INDEX_VERSION: "v2"
        CACHE_TIER1: "true"
        CACHE_TTL_SEC: "1800"
        CACHE_MAX_ITEMS: "1000"
        CACHE_ANSWERS: "false"
        DDB_CACHE_TABLE: !Ref RagAnswerCache
        CACHE_TTL_SECONDS: "172800"

Resources:
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: Prod
      CorsConfiguration:
        AllowMethods: ["GET", "POST", "OPTIONS"]
        AllowHeaders: ["*"]
        AllowOrigins: ["*"]
  
  RagAnswerCache:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-AnswerCache"
      BillingMode: PAY_PER_REQUEST         # on-demand, no capacity planning
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S                 # partition key: hash of question+domain+version
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  # IAM Role for RAGApi
  RAGApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: RAGApiLogging
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: RAGApiBedrock
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource:
                  - arn:aws:bedrock:us-east-1::foundation-model/amazon.titan-embed-text-v2*
                  - arn:aws:bedrock:*:*:inference-profile/*
                  - arn:aws:bedrock:*::foundation-model/*
        - PolicyName: ReadVectors
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${ArtifactsBucket}
                  - !Sub arn:aws:s3:::${ArtifactsBucket}/${IndexPrefix}/*
        - PolicyName: RAGApiSecrets
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Ref SlackSigningSecretArn
                  - !Ref SlackBotTokenArn
        - PolicyName: AWSLambdaBasicExecutionRole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub "arn:aws:s3:::${ArtifactsBucket}/${IndexPrefix}/*"
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource: !GetAtt RagAnswerCache.Arn

  RAGApi:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../src
      Handler: rag.api.app.handler
      MemorySize: 2048
      Timeout: 30
      EphemeralStorage:                   # optional, if your /tmp index grows
        Size: 1024
      AutoPublishAlias: live
      # ReservedConcurrentExecutions: 20
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: 5
      # ProvisionedConcurrencyConfig: !If
      #   - IsProd
      #   - ProvisionedConcurrentExecutions: !Ref ProvisionedConcurrency
      #   - !Ref "AWS::NoValue"
      DeploymentPreference:
        Type: AllAtOnce  # or Linear10PercentEvery1Minute, Canary10Percent5Minutes
      Environment:
        Variables:
          USE_S3_INDEX: "true"
          # Cache env (set below when we add the table)
          CACHE_ANSWERS: "true"
          CACHE_TTL_SECONDS: "86400"
          DDB_CACHE_TABLE: !Ref RagAnswerCache
      Role: !GetAtt RAGApiRole.Arn
      Layers:
        - arn:aws:lambda:us-east-1:471112701253:layer:numpy-1264-arm64:9
      Events:
        AnyRoute:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /{proxy+}
            Method: ANY

  # IAM Role for SlackEventsFunction
  SlackEventsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SlackEventsLogging
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: SlackEventsBedrock
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource:
                  - arn:aws:bedrock:us-east-1::foundation-model/amazon.titan-embed-text-v2*
                  - arn:aws:bedrock:*:*:inference-profile/*
                  - arn:aws:bedrock:*::foundation-model/*
        - PolicyName: SlackEventsSecrets
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Ref SlackSigningSecretArn
                  - !Ref SlackBotTokenArn          

  SlackEventsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../src
      Handler: handlers.slack_events.handler
      MemorySize: 512
      Timeout: 10
      Role: !GetAtt SlackEventsRole.Arn
      Layers: []
      AutoPublishAlias: live
      # ProvisionedConcurrencyConfig:
      #   ProvisionedConcurrentExecutions: 1
      # ProvisionedConcurrencyConfig: !If
      #   - IsProd
      #   - ProvisionedConcurrentExecutions: 1
      #   - !Ref "AWS::NoValue"
      Environment:
        Variables:
          RagApiUrl: !Ref RagApiUrl
          SLACK_SIGNING_SECRET_ARN: !Ref SlackSigningSecretArn
          SLACK_BOT_TOKEN_ARN: !Ref SlackBotTokenArn
      Events:
        SlackEventsRoute:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /slack/events
            Method: POST

Outputs:
  ApiBaseUrl:
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${HttpApi.Stage}"
  SlackEventsUrl:
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${HttpApi.Stage}/slack/events"
  ChatApiUrl:
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${HttpApi.Stage}/chat"
  RAGApiFunction:
    Value: !Ref RAGApi
  SlackEventsFunction:
    Value: !Ref SlackEventsFunction